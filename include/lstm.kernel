#include <nonlinear.h>

/*
 * In this file, lstm kernels are implemented as macros to be used in both the gpu and cpu
 * implementation of Sieknet.
 * This was a design decision to emphasize re-use of code, and enforce under-the-hood
 * homogeneity across implementations. Unfortunately, OpenCL does not allow address space
 * changes (i.e., passing a __global pointer to a function that takes a pointer), which
 * necessitated the use of macros to provide an implementation that could be reused on the 
 * GPU as well as the CPU.
 */

/*<<KERNEL START>>*/

#define agnostic_lstm_forward_kernel(input_nonl, input_gate, forget_gate, output_gate, cell_state, cell_lstate, layer_output, i) \
	if(cell_lstate[i] > SIEKNET_MAX_STATE)                                                \
		cell_state[i] = input_nonl[i] * input_gate[i] + forget_gate[i] * SIEKNET_MAX_STATE; \
	else if(cell_lstate[i] < -SIEKNET_MAX_STATE)                                          \
		cell_state[i] = input_nonl[i] * input_gate[i] - forget_gate[i] * SIEKNET_MAX_STATE; \
	else                                                                                  \
		cell_state[i] = input_nonl[i] * input_gate[i] + forget_gate[i] * cell_lstate[i];    \
	layer_output[i] = HYPERTAN(cell_state[i]) * output_gate[i];                           \
	no_op()



#define agnostic_lstm_input_gradient_kernel(input_nonl_grad, input_gate_grad, forget_gate_grad, output_gate_grad, params, input_gradient, size, input_dimension, layer_param_offset, skipdist, i) \
	input_gradient[i] = 0.0f;                                        \
	for(int j = 0; j < size; j++){                                   \
		const int params_per_gate = input_dimension+1;                 \
		const int w_idx = layer_param_offset + (skipdist * j) + i;     \
		input_gradient[i] += input_nonl_grad[j]  * params[w_idx + 0 * params_per_gate + 1]; \
		input_gradient[i] += input_gate_grad[j]  * params[w_idx + 1 * params_per_gate + 1]; \
		input_gradient[i] += forget_gate_grad[j] * params[w_idx + 2 * params_per_gate + 1]; \
		input_gradient[i] += output_gate_grad[j] * params[w_idx + 3 * params_per_gate + 1]; \
	} \

/*<<KERNEL END>>*/
