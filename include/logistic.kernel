/*<<KERNEL START>>*/

#define agnostic_logistic_kernel(x, y, n, i) \
	y[i] = activate(x[i], n)

#define agnostic_softmax_kernel(z, y, sum, i) \
	y[i] = exp(z[i]) / (*sum)

#define agnostic_softmax_sum_kernel(z, sum, dim) \
	*sum = 0.0f;                   \
	float fmax = 0.0f;             \
	for(int i = 0; i < dim; i++)   \
		if(z[i] > fmax) fmax = z[i]; \
	for(int i = 0; i < dim; i++){  \
		*sum = *sum + exp(z[i]-fmax);      \
		z[i] = z[i] - fmax;          \
	}                              \
	no_op()


#define agnostic_cost_kernel(o, y, c, dim, type) \
	*c = 0.0f;                      \
	for(int i = 0; i < dim; i++){     \
		*c = *c + cost(o[i], y[i], type); \
	}                                 \
	no_op()

#define agnostic_cost_gradient_kernel(o, y, dest, type, i) \
	{                                            \
		dest[i] = cost_gradient(o[i], y[i], type); \
	}                                            \
	no_op()

/*<<KERNEL END>>*/
